name: Build & Publish Docs (diagnostic)

on:
  push:
    branches: ["**"]
  workflow_dispatch: {}

concurrency:
  group: docs-${{ github.repository }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  docs:
    runs-on: ubuntu-latest
    env:
      REPO_SLUG:   ${{ github.repository }}
      BRANCH_NAME: ${{ github.ref_name }}
      REMOTE_BASE: /srv/app/wiki
      SSH_HOST:    ${{ secrets.VPS_HOST }}
      SSH_USER:    ${{ secrets.VPS_USER }}
      SSH_PORT:    ${{ secrets.VPS_PORT || '22' }}
      WIKI_TOKEN:  ${{ secrets.WIKI_TOKEN }}
      WIKI_EMAIL:  ${{ secrets.WIKI_GIT_EMAIL || 'ci-bot@users.noreply.github.com' }}
      WIKI_NAME:   ${{ secrets.WIKI_GIT_NAME  || 'Docs CI Bot' }}
      DOCS_BASE_URL: ${{ secrets.DOCS_BASE_URL || 'http://89.117.36.132/docs' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print context
        run: |
          echo "REPO_SLUG=${REPO_SLUG}"
          echo "BRANCH_NAME=${BRANCH_NAME}"
          echo "WORKSPACE=$(pwd)"
          ls -la

      - name: Validate required secrets
        run: |
          missing=0
          for v in VPS_HOST VPS_USER WIKI_TOKEN ; do
            eval "val=\${{ secrets[$v] || env[$v] }}"
          done
          for v in VPS_HOST VPS_USER WIKI_TOKEN ; do
            eval "val=\${$v}"
            if [ -z "$val" ]; then
              echo "::error title=Missing secret::$v is not set in this repository (Settings → Secrets and variables → Actions)."
              missing=1
            fi
          done
          # SSH key must be non-empty
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "::error title=Missing secret::VPS_SSH_KEY is not set."
            missing=1
          fi
          if [ "$missing" -ne 0 ]; then exit 1; fi

      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz rsync openssh-client

      - name: Show Doxygen version
        run: |
          doxygen -v || true

      - name: Build docs (Doxygen)
        run: |
          if [ ! -f Doxyfile ]; then
            echo "::error title=Doxyfile missing::Add a Doxyfile at the repo root."; exit 1
          fi
          echo ">>> running doxygen"
          doxygen Doxyfile 2>&1 | tee doxygen.log
          echo ">>> listing docs output"
          if [ -d docs/_doxygen/html ]; then
            find docs/_doxygen/html -maxdepth 2 -type f | head -n 50
          else
            echo "::error title=Docs not generated::Expected docs/_doxygen/html but it does not exist."
            echo "Dumping last 200 lines of doxygen.log:"
            tail -n 200 doxygen.log || true
            exit 1
          fi

      - name: Prepare SSH
        env:
          KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          if [ -z "$KEY" ]; then echo "::error::VPS_SSH_KEY is empty."; exit 1; fi
          mkdir -p ~/.ssh
          printf "%s" "$KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts

          echo "Testing SSH connectivity to ${SSH_USER}@${SSH_HOST}:${SSH_PORT} ..."
          if ! ssh -i ~/.ssh/id_ed25519 -p "${SSH_PORT}" -o BatchMode=yes -o ConnectTimeout=10 "${SSH_USER}@${SSH_HOST}" "echo ok"; then
            echo "::error title=SSH failed::Check VPS_SSH_KEY, VPS_HOST, VPS_USER, firewall, and that /home/${SSH_USER}/.ssh/authorized_keys contains the public key."
            exit 1
          fi

      - name: Deploy HTML to VPS (branch-scoped, atomic)
        run: |
          SRC="docs/_doxygen/html/"
          TARGET="${REMOTE_BASE}/${REPO_SLUG}/${BRANCH_NAME}"
          echo "Deploying ${SRC} -> ${SSH_HOST}:${TARGET}"
          ssh -i ~/.ssh/id_ed25519 -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "mkdir -p '${TARGET}.tmp' && chmod -R 755 '$(dirname "$REMOTE_BASE")' || true"
          rsync -az --delete -e "ssh -i ~/.ssh/id_ed25519 -p ${SSH_PORT}" "$SRC" "${SSH_USER}@${SSH_HOST}":"${TARGET}.tmp/"
          ssh -i ~/.ssh/id_ed25519 -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "rm -rf '${TARGET}.bak' && mv '${TARGET}' '${TARGET}.bak' 2>/dev/null || true && mv '${TARGET}.tmp' '${TARGET}' && rm -rf '${TARGET}.bak'"

      - name: Compute public docs URL
        id: puburl
        run: |
          echo "url=${DOCS_BASE_URL}/${REPO_SLUG}/${BRANCH_NAME}/index.html" >> "$GITHUB_OUTPUT"
          echo "Public URL: ${{ steps.puburl.outputs.url }}"

      - name: Update GitHub Wiki
        shell: bash
        run: |
          set -euo pipefail
          SAFE_BRANCH="$(printf '%s' "${BRANCH_NAME}" | tr '/:' '_-')"
          WIKI_URL="https://x-access-token:${WIKI_TOKEN}@github.com/${REPO_SLUG}.wiki.git"
          git config --global user.email "${WIKI_EMAIL}"
          git config --global user.name  "${WIKI_NAME}"
          rm -rf wiki && git clone "${WIKI_URL}" wiki
          cd wiki
          REPO_NAME="${REPO_SLUG#*/}"

          cat > Home.md <<'MD'
          # Project Documentation
          This wiki updates automatically on each push. Full API docs are deployed per branch to our website.
          - Use the Sidebar to jump to branches.
          MD

          cat > _Sidebar.md <<MD
          # ${REPO_NAME} Wiki
          - [[Home|Home]]
          - Branch Docs
            - [[${BRANCH_NAME}|${BRANCH_NAME}]]
          MD

          cat > "${SAFE_BRANCH}.md" <<MD
          # ${REPO_NAME} — ${BRANCH_NAME}
          Latest generated API docs for \`${BRANCH_NAME}\`:
          - **HTML site:** [Open docs](${{ steps.puburl.outputs.url }})
          _Updated by CI on $(date -u +"%Y-%m-%d %H:%M:%S UTC")._
          MD

          git add -A
          git commit -m "docs(wiki): update for ${BRANCH_NAME}" || true
          git push